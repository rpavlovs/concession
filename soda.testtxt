TEST DOCUMENTATION
==================
The program performs a simulation of a complex system of WATCola soda pop
production, distribution and consumption on campus.

USER INTERFACE TESTING
    There is no user interface to be tested, so the testing focuses
    solely on the simulation for the set of starting configurations.

SIMULATION TESTING

  TEST 1:
  -------
    DATA DESCRIPTION
    The abstract picture of the simulation includes 5 entities that always
    have only one instance and 3 objects that have at least one instance.

    Contents of "soda.config.t1" file:
      1 SodaCost                1
      2 NumStudents             1
      3 MaxPurchases            1
      4 NumVendingMachines      1
      5 MaxStockPerFlavour      5
      6 MaxShippedPerFlavour    3
      7 TimeBetweenShipments    1
      8 ParentalDelay           2
      9 NumCouriers             1

    This configuratoin suggests minimal amount of objects, which interaction
    is simulated (one student, one vending machine and one courier), and
    minimal amount of intermal iterations for every object (only one purchase
    per student, low time between shipments and low soda price). This sould
    indicate whether the basic interactions between objects work correctly.

    TESTING
    Here is the script-fixed log of the testing performed with line numbers
    attached.

     1  Parent  WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
     2  ******* ******* ******* ******* ******* ******* ******* *******
     3  S       S       S                                       S
     4  D0,3            R0      S       S       S0,1    S1         
     5  D0,3            N0,0            G10     V0                 
     6                          P10     P                          
     7                          d0,10                   r          
     8                          U0,10                           t0,5
     9  D0,2                    D0,0    G10             R       T0,5
    10  D0,1                                    B4      B0,3       
    11  ...     ...     ...     ...     ...     F       ...     ...
    12  D0,1                    P10     P                          
    13                          d0,10                   r          
    14  D0,1                    U0,3                    R          
    15  D0,2                    D0,3                               
    16  D0,3                                                       
    17  D0,3                                                       
    18  D0,2                                                       
    19  ...     ...     ...     F       ...     ...     ...     ...
    20  ...     ...     ...     ...     F       ...     ...     ...
    21  D0,3                                                       
    22  ...     ...     ...     ...     ...     ...     F       ...
    23  D0,2                                                       
    24  D0,3                                                       
    25  F       ...     ...     ...     ...     ...     ...     ...
    26  ...     ...     F       ...     ...     ...     ...     ...
    27  ...     ...     ...     ...     ...     ...     ...     F
    28  ...     F       ...     ...     ...     ...     ...     ...
    29  ***********************

    ANALYSIS
    The results from running the program on "soda.config.t1" show that:
    1)  All objects start and end correctly.
    2)  Interaction between objects is done in a way specified in the
        assinment. 
    3)  Config file is read correctly.
    4)  Printing format satisfies assignmnet specification.

    From this we can say that each objects basic functionality is implemented
    correctly. Printer and config reader is implemented correctly.

  TEST 1:
  -------
    DATA DESCRIPTION
    The abstract picture of the simulation includes 5 entities that always
    have only one instance and 3 objects that have at least one instance.

    Contents of "soda.config.t1" file:
      1 SodaCost                1
      2 NumStudents             1
      3 MaxPurchases            1
      4 NumVendingMachines      1
      5 MaxStockPerFlavour      5
      6 MaxShippedPerFlavour    3
      7 TimeBetweenShipments    1
      8 ParentalDelay           2
      9 NumCouriers             1

    This configuratoin suggests minimal amount of objects, which interaction
    is simulated (one student, one vending machine and one courier), and
    minimal amount of intermal iterations for every object (only one purchase
    per student, low time between shipments and low soda price). This sould
    indicate whether the basic interactions between objects work correctly.

    TESTING
    Here is the script-fixed log of the testing performed with line numbers
    attached.

     1  Parent  WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
     2  ******* ******* ******* ******* ******* ******* ******* *******
     3  S       S       S                                       S
     4  D0,1            R0      S       S       S3,1    S1         
     5  D0,3            N0,0            G4      V0              t0,5
     6                          P4      P                          
     7                          d0,4                    r          
     8  D0,3                    U0,16   G7              R       T0,5
     9  D0,1                    D0,0                               
    10  D0,1                    P7      P                          
    11                          d0,7                    r          
    12  D0,1                    U0,9    G5              R          
    13  D0,3                    D0,0    P       L                  
    14                          P5                                 
    15                          d0,5                    r          
    16  D0,2                    U0,6                            t0,5
    17  D0,2                    D0,2    G9              R       T0,5
    18                                          B4      B3,2       
    19  ...     ...     ...     ...     ...     F       ...     ...
    20  D0,2                                                       
    21  D0,1                                                       
    22  D0,2                                                       
    23  D0,3                    P9      P                          
    24                          d0,9                    r          
    25  D0,1                    U0,1                    R          
    26  D0,3                    D0,4                               
    27  D0,2                                                       
    28  ...     ...     ...     F       ...     ...     ...     ...
    29  ...     ...     ...     ...     F       ...     ...     ...
    30  D0,1                                                       
    31  ...     ...     ...     ...     ...     ...     F       ...
    32  D0,3                                                       
    33  D0,2                                                       
    34  F       ...     ...     ...     ...     ...     ...     ...
    35  ...     ...     F       ...     ...     ...     ...     ...
    36  ...     ...     ...     ...     ...     ...     ...     F
    37  ...     F       ...     ...     ...     ...     ...     ...
    38  ***********************



    ANALYSIS
    The results from running the program on "soda.config.t1" show that:
    1)  All objects start and end correctly.
    2)  Interaction between objects is done in a way specified in the
        assinment. 
    3)  Config file is read correctly.
    4)  Printing format satisfies assignmnet specification.

    From this we can say that each objects basic functionality is implemented
    correctly. Printer and config reader is implemented correctly.


TEST 2:

config:

SodaCost                2
NumStudents             5
MaxPurchases            8
NumVendingMachines      1
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             1

TEST 3:

config:

SodaCost                2
NumStudents             1
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             1

TEST 4:

config:

SodaCost                2
NumStudents             1
MaxPurchases            8
NumVendingMachines      1
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             5

TEST 5:

config:

SodaCost                2
NumStudents             5
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             5

TEST 6:

config:

SodaCost                1
NumStudents             5
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             5

TEST 7:

config:

SodaCost                2
NumStudents             5
MaxPurchases            1
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             5

TEST 8:

config:

SodaCost                2
NumStudents             5
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      1
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             5

TEST 9:

config:

SodaCost                2
NumStudents             5
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    1
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             5

TEST 10:

config:

SodaCost                2
NumStudents             5
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    1
ParentalDelay           2
NumCouriers             5

TEST 11:

config:

SodaCost                2
NumStudents             5
MaxPurchases            8
NumVendingMachines      5
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           1
NumCouriers             5

TEST 12:

config:

SodaCost                2
NumStudents             1
MaxPurchases            8
NumVendingMachines      1
MaxStockPerFlavour      5
MaxShippedPerFlavour    3
TimeBetweenShipments    3
ParentalDelay           2
NumCouriers             1

  TEST 1:
  -------
    DATA DESCRIPTION
    The first input file used (as a re-direction of standard input), is
    "data1.in".  The contents of the file, with each line numbered, are:

         1  abcdefghijklmnopqrstuvwxyz
         2  ABCDEFGHIJKLMNOPQRSTUVWXYZ
         3       4% ^7890)
         4  
         5  This is a short text piece.

    Line 1 is used to verify that each lower case alphabetic character is 
    recognized and converted correctly.  Line 2 verifies that each upper
    case alphabetic character is converted correctly.  Lines 3 and 4
    verify that non-alphabetic characters, including tabs, spaces, and 
    carriage returns, are left undisturbed.  Line 5 tests a mixture of
    upper and lower case characters, the actual choices of which are
    random.

    TESTING
    Here is the script-fixed log of the testing performed with line numbers
    attached.

       1 Script started on Thu Sep 15 10:54:20 1994
       2 cs343_ctkierst@cayley[1]% cat data1.in
       3 abcdefghijklmnopqrstuvwxyz
       4 ABCDEFGHIJKLMNOPQRSTUVWXYZ
       5      4% ^7890)
       6 
       7 This is a short text piece.
       8 cs343_ctkierst@cayley[2]% ./test < data1.in
       9 ABCDEFGHIJKLMNOPQRSTUVWXYZ
      10 abcdefghijklmnopqrstuvwxyz
      11      4% ^7890)
      12 
      13 tHIS IS A SHORT TEXT PIECE.
      14 cs343_ctkierst@cayley[5]% exit
      15 exit
      16
      17 script done on Thu Sep 15 10:54:46 1994

    ANALYSIS
    The results from running the program on "data1.in" show that:
    1)  All lower case characters are correctly recognized and converted.
        This is shown by the transformation of the contents of line 3 to 
        the results shown in line 9 as well the change in line 7 to what is
        shown in line 13. 
    2)  All upper case characters are correctly recognized and converted.
        This is shown by the transformation of the contents of line 4 to 
        the results shown in line 10 as well the change in line 7 to what is
        shown in line 13. 
    3)  All other characters are left untouched shown by the lack of change
        of the contents of lines 5 and 6 in lines 11 and 12. 
    4)  A mixture of upper and lower case alphabetic characters are
        correctly converted.  This is shown by the transformation of line
        7 to the results shown in line 13.

    The test for isupper(ch) has been verified by the data on lines 4 and 7.
    The test for islower(ch) has been verified by the data on lines 3, 7, and 9.
    The default case of being neither an upper nor a lower case character has
    been verified by the data on lines 5 and 6.

    From this we can say that each condition in the main loop has been
    exercised, and the basic conversion algorithm has been shown to be correct.

  TEST 2:
  -------
    DATA DESCRIPTION
    "data2.in", is an empty input file.  It is used to verify that the end 
    of file is detected correctly, and no extraneous output is generated.

    TESTING
    Here is the script-fixed log of the testing performed.

       1 Script started on Thu Sep 15 11:13:01 1994
       2 cs343_ctkierst@cayley[3]% cat data2.in
       3 cs343_ctkierst@cayley[4]% ./test < data2.in
       4 cs343_ctkierst@cayley[5]% exit
       5 exit
       6
       7 script done on Thu Sep 15 11:13:33 1994

    ANALYSIS
    Line 3 runs the program on "data2.in" and lines 4-5 show that the end-of-
    file is correctly detected, and no extraneous output is generated.  Thus
    the basic input processing algorithm is shown to be correct.